{"Name":"Photon Cloud","Id":286,"Alias":"Photon-Xamarin","Description":"Photon is a development framework for multiplayer games and applications. It consists of client and server software and this is a client SDK for Mono. Many other client platforms are supported and can communicate cross-platform.\r\n\r\nThis client libary package supports Xamarin.Android and Xamarin.iOS. The package includes a demo, readme, reference documentation and a change log.\r\n\r\nYour clients can either connect to the Photon Cloud (free for development) or you download and run your own Photon instance.\r\n\r\nPlease refer to the Getting Started document and the included reference documentation for further details.\r\n\r\n\r\n\r\n### Some Examples\r\n\r\nTo connect, call:\r\n\r\n```csharp\r\nusing ExitGames.Client.Photon;\r\n\r\npublic class MyClient : IPhotonPeerListener\r\n{\r\n\tLoadBalancingPeer peer;\r\n\r\n    public bool Connect()\r\n    {\r\n\t\t// A LoadBalancingPeer lets you connect and call operations on the server. Callbacks go to \"this\" listener instance and use UDP\r\n\t\tpeer = new LoadBalancingPeer(this, ConnectionProtocol.Udp);\r\n        if (peer.Connect(\"app.exitgamescloud.com:port\", AppId))\r\n        {\r\n            return true;\r\n        }\r\n\r\n        // connect might fail right away if the address format is bad, e.g.\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\nTo get results, implement the IPhotonPeerListener interface:\r\n\r\n```csharp\r\npublic interface IPhotonPeerListener\r\n{\r\n    void DebugReturn(DebugLevel level, string message);\r\n    void OnOperationResponse(OperationResponse operationResponse);\r\n    void OnStatusChanged(StatusCode statusCode);\r\n    void OnEvent(EventData eventData);\r\n}\r\n```\r\n\r\nTo create a room, call:\r\n\r\n```csharp\r\n// being connected, you can call:\r\n// OpCreateRoom(string roomName, bool isVisible, bool isOpen, byte maxPlayers, Hashtable customGameProperties, string[] propsListedInLobby)\r\n// custom properties are named by you and their value is synced with anyone joining the room\r\npeer.OpCreateRoom(roomNameString, true, true, 0, customPropertiesOfRoom, customPropsShownInLobby);\r\n```\r\n\r\nTo join a random room, call:\r\n\r\n```csharp\r\n// join random rooms easily, filtering for specific room properties, if needed\r\nHashtable expectedCustomRoomProperties = new Hashtable();\r\nexpectedCustomRoomProperties[\"map\"] = 1;    // custom props can have any name but the key must be string\r\npeer.OpJoinRandomRoom(expectedCustomRoomProperties, (byte)expectedMaxPlayers);\r\n```\r\n\r\nTo send events to others in same room, call:\r\n\r\n```csharp\r\nbyte eventCode = 1; // make up event codes at will\r\nHashtable evData = new Hashtable();\t// put your data into a key-value hashtable\r\nbool sendReliable = false; // send something reliable if it must arrive everywhere\r\nbyte channelId = 0; // for advanced sequencing. can be 0 in most cases\r\npeer.OpRaiseEvent(eventCode, evData, sendReliable, channelId);\r\n```","Version":"3.2.1.5","Summary":"Development framework for realtime multiplayer games.","QuickStart":"# Getting Started\n\nPhoton is a development framework for multiplayer games and applications. It consists of client and server software and this is a client SDK for Mono. Many other client platforms are supported and can communicate cross-platform.\n\nUsing the [Photon Cloud](http://cloud.exitgames.com), you can have thousands of games running without ever setting up a server. Alternatively you can download the Photon Server and run it yourself. With the Server SDK you can build your own server logic in C# without handling the low level communication yourself.\n\n\n## Headstart with Photon Cloud\n\nTo get started, we will use the Photon Cloud service. This is without obligation or costs for you but lets us skip the distracting work of setting up a server yourself.\n\nRegistration is the same for all platforms and described here:\n\n[http://doc.exitgames.com/photon-cloud/FSteps_PLAIN](http://doc.exitgames.com/photon-cloud/FSteps_PLAIN)\n\n## Particle Demo Setup\n\nThe Particle Demo is a simple, code-focused sample that shows some of Photon\u0027s \"out of the box\" features and the api to use. It\u0027s GUI is plain and will show just a grid with players as rectangles moving around.\n\nTo make it run, get an AppId from the [Photon Cloud Dashboard](https://cloud.exitgames.com/Dashboard), and insert it into the demo. **Open MainActivity.cs and replace the value of field AppId.**\n\nEssentially, the demo is now ready to compile and run on device. Run it multiple times to see clients interact or add multiple \"peers\" in one app. Each has a separate connection and runs a distinct game \"logic\".\n\n## The Particle-Demo Code\n\nAside from reading the documentation and reference, you should check out the code of the samples to learn using Photon. The api is simple but flexible. A lot is client-defined.\n\nGameLogic.cs encapsulates the logic this demos needs. It\u0027s built to be included into any game loop and will send and handle events defined for movement and other player info.\n\nThe ParticlePlayer.cs and ParticleRoom.cs are actually just really minor extensions of the default features provided by the LoadBalancing API, which is referenced.\n\n## More info\n\nEach of our SDKs includes it\u0027s own reference documentation and demos. You should read that in doubt.\n\nWe also have a growing number of [online resources in our developer network](http://doc.exitgames.com/photon-cloud).\n\nIf any questions remain unanswered [post in our forum](http://forum.exitgames.com).","Hash":"6b714c5cc61b75def3f998bafbb7626b","TargetPlatforms":["ios","android"],"TrialHash":null}